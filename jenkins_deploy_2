pipeline {
    agent any

    parameters {
        string(name: 'EC2_INSTANCE_ID', defaultValue: '', description: 'Enter the EC2 Instance ID')
    }
    environment {
        AWS_DEFAULT_REGION = "us-east-2"
        S3_BUCKET = "tf-sanity-test-bucket-c0866eaf"
        S3_OBJECT = "tech-challenge-flask-app-main.zip"
       // EC2_INSTANCE_ID = "i-0af76ca1958102017"
    }
    
    stages {
        stage('Deploy via SSM') {
            steps {
                script {
                    echo "Triggering SSM command on EC2 to redeploy app..."
                    
                    // Send SSM command and capture command ID
                    def commandId = sh(
                        script: '''
                        aws ssm send-command \\
                          --instance-ids "''' + EC2_INSTANCE_ID + '''" \\
                          --document-name "AWS-RunShellScript" \\
                          --comment "Deploy Flask App" \\
                          --parameters 'commands=[
                            "echo Starting deployment process...",
                            "cd /home/ec2-user",
                            "echo Current directory: $(pwd)",
                            "echo Downloading from S3...",
                            "aws s3 cp s3://''' + S3_BUCKET + '''/''' + S3_OBJECT + ''' . --region ''' + AWS_DEFAULT_REGION + '''",
                            "echo Download completed. Checking file...",
                            "ls -la ''' + S3_OBJECT + '''",
                            "echo Extracting application...",
                            "unzip -o ''' + S3_OBJECT + '''",
                            "echo Extraction completed. Contents:",
                            "ls -la",
                            "cd tech-challenge-flask-app-main",
                            "echo Creating virtual environment...",
                            "python3 -m venv venv",
                            "cd ..",
                            "sudo chown -R ec2-user:ec2-user tech-challenge-flask-app-main/",
                            "cd tech-challenge-flask-app-main",
                            "echo Activating virtual environment...",
                            "source venv/bin/activate",
                            "echo Stopping existing gunicorn processes...",
                            "fuser -k 8000/tcp || true",
                            "sleep 2",
                            "export TC_DYNAMO_TABLE=Candidates",
                            "pip install requests==2.32.4",
                            "echo Starting new gunicorn process...",
                            "nohup gunicorn -b 0.0.0.0:8000 app:candidates_app & > /home/ec2-user/app.log 2>&1 &",
                            "echo Deployment completed successfully!"
                          ]' \\
                          --query 'Command.CommandId' \\
                          --output text
                        ''',
                        returnStdout: true
                    ).trim()
                    
                    echo "SSM Command ID: ${commandId}"
                    
                    // Wait for command to complete
                    echo "Waiting for command to execute..."
                    sleep(time: 30, unit: 'SECONDS')
                    
                    // Check command execution results
                    echo "Checking command execution results..."
                    def executionResult = sh(
                        script: '''
                        aws ssm get-command-invocation \\
                          --command-id "''' + commandId + '''" \\
                          --instance-id "''' + EC2_INSTANCE_ID + '''" \\
                          --query 'Status' \\
                          --output text
                        ''',
                        returnStdout: true
                    ).trim()
                    
                    echo "Command Status: ${executionResult}"
                    
                    // Get detailed output
                    sh '''
                    echo "=== Command Output ==="
                    aws ssm get-command-invocation \\
                      --command-id "''' + commandId + '''" \\
                      --instance-id "''' + EC2_INSTANCE_ID + '''" \\
                      --query 'StandardOutputContent' \\
                      --output text
                    
                    echo "=== Command Errors (if any) ==="
                    aws ssm get-command-invocation \\
                      --command-id "''' + commandId + '''" \\
                      --instance-id "''' + EC2_INSTANCE_ID + '''" \\
                      --query 'StandardErrorContent' \\
                      --output text
                    '''
                    
                    // Check if command succeeded
                    if (executionResult != 'Success') {
                        error("SSM command failed with status: ${executionResult}")
                    }
                    
                    echo "Deployment completed successfully!"
                }
            }
        }
        

    }
    
    post {
        success {
            echo "Pipeline completed successfully!"
        }
        
    
    }
}
