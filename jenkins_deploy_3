pipeline {
    agent any

    parameters {
        string(name: 'EC2_INSTANCE_ID', defaultValue: '', description: 'Enter the EC2 Instance ID')
    }
    environment {
        AWS_DEFAULT_REGION = "us-east-2"
        S3_BUCKET = "tf-sanity-test-bucket-c0866eaf"
        S3_OBJECT = "tech-challenge-flask-app-main1.zip"
    }
    
    stages {
        stage('Deploy via SSM') {
            steps {
                script {
                    echo "Deploying Flask app..."
                    
                    def commandId = sh(
                        script: '''
                        aws ssm send-command \\
                          --instance-ids "''' + params.EC2_INSTANCE_ID + '''" \\
                          --document-name "AWS-RunShellScript" \\
                          --comment "Deploy Flask App" \\
                          --parameters 'commands=[
                            "cd /home/ec2-user",
                            "echo Step 1: Downloading from S3...",
                            "aws s3 cp s3://''' + S3_BUCKET + '''/''' + S3_OBJECT + ''' . --region ''' + AWS_DEFAULT_REGION + '''",
                            "echo Step 2: Cleaning and extracting...",
                            "rm -rf tech-challenge-flask-app-main",
                            "unzip -o ''' + S3_OBJECT + '''",
                            "cd tech-challenge-flask-app-main",
                            "echo Step 3: Setting up virtual environment...",
                            "python3 -m venv venv --clear",
                            "source venv/bin/activate && pip install --upgrade pip",
                            "source venv/bin/activate && pip install flask gunicorn boto3 requests",
                            "echo Step 4: Stopping existing processes...",
                            "pkill -f gunicorn || true",
                            "screen -wipe || true",
                            "echo Step 5: Creating startup script...",
                            "cat > start_app.sh << EOF",
                            "#!/bin/bash",
                            "cd /home/ec2-user/tech-challenge-flask-app-main",
                            "source venv/bin/activate",
                            "export TC_DYNAMO_TABLE=Candidates",
                            "gunicorn -b 0.0.0.0:8000 app:candidates_app --access-logfile gunicorn_access.log --error-logfile gunicorn_error.log",
                            "EOF",
                            "chmod +x start_app.sh",
                            "echo Step 6: Starting application in screen...",
                            "screen -S flask-app -dm ./start_app.sh",
                            "sleep 5",
                            "echo Step 7: Checking application status...",
                            "screen -list",
                            "netstat -tlnp | grep :8000 || echo Port 8000 not listening yet",
                            "curl -f http://localhost:8000/gtg && echo App is running! || echo App is starting...",
                            "echo Deployment completed. Use screen -r flask-app to view logs"
                          ]' \\
                          --query 'Command.CommandId' \\
                          --output text
                        ''',
                        returnStdout: true
                    ).trim()
                    
                    echo "Command ID: ${commandId}"
                    
                    // Better polling with status check
                    echo "Waiting for command to complete..."
                    def maxAttempts = 10
                    def attempt = 0
                    def status = 'InProgress'
                    
                    while (attempt < maxAttempts && status == 'InProgress') {
                        sleep(time: 15, unit: 'SECONDS')
                        attempt++
                        
                        status = sh(
                            script: '''
                            aws ssm get-command-invocation \\
                              --command-id "''' + commandId + '''" \\
                              --instance-id "''' + params.EC2_INSTANCE_ID + '''" \\
                              --query 'Status' \\
                              --output text 2>/dev/null || echo "Pending"
                            ''',
                            returnStdout: true
                        ).trim()
                        
                        echo "Attempt ${attempt}: Status = ${status}"
                    }
                    
                    // Get the output
                    echo "=== Command Output ==="
                    sh '''
                    aws ssm get-command-invocation \\
                      --command-id "''' + commandId + '''" \\
                      --instance-id "''' + params.EC2_INSTANCE_ID + '''" \\
                      --query 'StandardOutputContent' \\
                      --output text
                    '''
                    
                    echo "=== Command Errors (if any) ==="
                    sh '''
                    aws ssm get-command-invocation \\
                      --command-id "''' + commandId + '''" \\
                      --instance-id "''' + params.EC2_INSTANCE_ID + '''" \\
                      --query 'StandardErrorContent' \\
                      --output text
                    '''
                }
            }
        }
    }
    
    post {
        success {
            echo "Pipeline completed! App should be running on port 8000"
            echo "SSH to EC2 and run: curl http://localhost:8000/gtg"
            echo "View app logs with: screen -r flask-app"
        }
        failure {
            echo "Pipeline failed. Check the SSM command output above."
        }
    }
}
