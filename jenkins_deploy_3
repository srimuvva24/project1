pipeline {
    agent any

    parameters {
        string(name: 'EC2_INSTANCE_ID', defaultValue: '', description: 'Enter the EC2 Instance ID')
    }
    environment {
        AWS_DEFAULT_REGION = "us-east-2"
        S3_BUCKET = "tf-sanity-test-bucket-c0866eaf"
        S3_OBJECT = "tech-challenge-flask-app-main.zip"
    }
    
    stages {
        stage('Deploy via SSM') {
            steps {
                script {
                    echo "Deploying Flask app..."
                    
                    def commandId = sh(
                        script: '''
                        aws ssm send-command \\
                          --instance-ids "''' + params.EC2_INSTANCE_ID + '''" \\
                          --document-name "AWS-RunShellScript" \\
                          --comment "Deploy Flask App" \\
                          --parameters 'commands=[
                            "cd /home/ec2-user",
                            "aws s3 cp s3://''' + S3_BUCKET + '''/''' + S3_OBJECT + ''' . --region ''' + AWS_DEFAULT_REGION + '''",
                            "rm -rf tech-challenge-flask-app-main",
                            "unzip -o ''' + S3_OBJECT + '''",
                            "cd tech-challenge-flask-app-main",
                            "python3 -m venv venv --clear",
                            "source venv/bin/activate && pip install --upgrade pip",
                            "source venv/bin/activate && pip install flask gunicorn boto3 requests",
                            "pkill -f gunicorn || true",
                            "screen -S flask-app -dm bash -c 'cd /home/ec2-user/tech-challenge-flask-app-main && source venv/bin/activate && export TC_DYNAMO_TABLE=Candidates && gunicorn -b 0.0.0.0:8000 app:candidates_app'",
                            "sleep 3",
                            "curl http://localhost:8000/gtg || echo App starting...",
                            "echo 'App deployed. Check with: screen -r flask-app'"
                          ]' \\
                          --query 'Command.CommandId' \\
                          --output text
                        ''',
                        returnStdout: true
                    ).trim()
                    
                    echo "Command ID: ${commandId}"
                    sleep(time: 30, unit: 'SECONDS')
                    
                    sh '''
                    aws ssm get-command-invocation \\
                      --command-id "''' + commandId + '''" \\
                      --instance-id "''' + params.EC2_INSTANCE_ID + '''" \\
                      --query 'StandardOutputContent' \\
                      --output text
                    '''
                }
            }
        }
    }
}
